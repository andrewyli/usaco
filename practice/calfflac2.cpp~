/*
PROB: calfflac
ID: andrewy3
LANG: C++
*/

//mainly working, add in newline concepts to fully get correect answer
//test three works, but must have multiple lines.



#include <algorithm>
#include <string>
#include <iostream>
#include <fstream>
using namespace std;

bool isPalindromic(const string& s);
string removeExtra(const string& s);
string splice(const string& s);


int main()
{
    ifstream fin("calfflac.in");
    ofstream fout("calfflac.out");

    vector hippodrome = "";
    string buffer = "";
    while (getline(fin, buffer))
    {
        hippodrome += '\n' + buffer; 
    }
    string store = hippodrome; //upper case version
    for (int i = 0; i < hippodrome.length(); i++)
    {
        hippodrome[i] = tolower(hippodrome[i]);
    }
    int longpos;
    int longpal;
    string potpal;
    for (int i = 0; i < hippodrome.length(); i++)
    {
        for (int j = 0; j <= min(i, (int)hippodrome.length() - i); j++)
        {
            potpal = hippodrome.substr(i - j, 2*j + 1);
            if (isPalindromic(removeExtra(potpal)))
            {
                if ((int)removeExtra(potpal).length() > (int)removeExtra(longest).length())
                {
                    longpos = i - j;
                    longpal = 2*j + 1;
                }
            }
            else if (isalpha(potpal[0]) && isalpha(potpal[2*j]))
            {
                break;
            }
        }
    }
    string longest = store.substr(longpos, longpal);
    fout << (int)removeExtra(longest).length() << "\n" << splice(longest) << "\n";
}

bool isPalindromic(const string& s)
{
    if (s == "") return true;
    int temp = s.length();
    for (int i = 0; i < temp; i++)
    {
        if (!(s[i] == s[temp - i - 1]))
        {
            return false;
        }
    }
    return true;
}

string removeExtra(const string& s)
{
    string temp = s;
    for (int i = 0; i < temp.length(); i++)
    {
        if (!isalpha(temp[i]))
        {
            temp = temp.substr(0, i) + temp.substr(i + 1);
            i--;
        }
    }
    return temp;
}

string splice(const string& s)
{
    string temp = s;
    int i = 0;
    while (!isalpha(temp[i]))
    {
        i++;
    }
    temp = temp.substr(i);
    i = temp.length() - 1;
    while (!isalpha(temp[i]))
    {
        i--;
    }
    temp = temp.substr(0, i + 1);
    return temp;
}
